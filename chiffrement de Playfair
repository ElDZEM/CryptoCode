package crypto;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;

public class ChiffrementPlayfairGUI {
    public static void main(String[] args) {
        // Création de la fenêtre
        JFrame fenetre = new JFrame("Chiffrement Playfair");
        fenetre.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        fenetre.setSize(400, 300);
        fenetre.setLayout(new GridLayout(5, 1));

        // Composants pour le message
        JLabel labelMessage = new JLabel("Entrez le message :");
        JTextField champMessage = new JTextField();
        fenetre.add(labelMessage);
        fenetre.add(champMessage);

        // Composants pour la clé
        JLabel labelCle = new JLabel("Entrez la clé :");
        
        JTextField champCle = new JTextField();
        fenetre.add(labelCle);
        fenetre.add(champCle);
        
        // Bouton et zone de résultat
        JLabel labelAchiffrer = new JLabel("Message exact qui a ete chiffre:\n");
        JLabel labelResultat = new JLabel("Message chiffré : ");
        JButton boutonChiffrer = new JButton("Chiffrer");
        fenetre.add(labelAchiffrer);
        fenetre.add(labelResultat);
        fenetre.add(boutonChiffrer);
        
        

        // Action du boutonA
        boutonChiffrer.addActionListener(e -> {
            String message = champMessage.getText().toUpperCase().replaceAll("W", "V").replaceAll("[^A-Z]", "");
            String cle = champCle.getText().toUpperCase().replaceAll("W", "V").replaceAll("[^A-Z]", "");
            if (!message.isEmpty() && !cle.isEmpty()) {
            	labelAchiffrer.setText("Message exact qui a ete chiffre:"+preparerMessage(message));
                labelResultat.setText("Message chiffré : " + chiffrerMessage(message, cle));
            } else {
                labelResultat.setText("Veuillez entrer un message et une clé valides.");
            }
        });

        // Affichage de la fenêtre
        fenetre.setVisible(true);
    }

    // Fonction principale pour chiffrer le message
    public static String chiffrerMessage(String message, String cle) {
        char[][] grille = construireGrille(cle);
        message = preparerMessage(message);

        StringBuilder messageChiffre = new StringBuilder();
        for (int i = 0; i < message.length(); i += 2) {
            char lettre1 = message.charAt(i);
            char lettre2 = message.charAt(i + 1);
            int[] position1 = trouverPosition(grille, lettre1);
            int[] position2 = trouverPosition(grille, lettre2);

            if (position1[0] == position2[0]) { // Même ligne
                messageChiffre.append(grille[position1[0]][(position1[1] + 1) % 5]);
                messageChiffre.append(grille[position2[0]][(position2[1] + 1) % 5]);
            } else if (position1[1] == position2[1]) { // Même colonne
                messageChiffre.append(grille[(position1[0] + 1) % 5][position1[1]]);
                messageChiffre.append(grille[(position2[0] + 1) % 5][position2[1]]);
            } else { // Rectangle
                messageChiffre.append(grille[position1[0]][position2[1]]);
                messageChiffre.append(grille[position2[0]][position1[1]]);
            }
        }
        return messageChiffre.toString();
    }

    // Fonction pour construire la grille de Playfair
    public static char[][] construireGrille(String cle) {
        char[][] grille = new char[5][5];
        Set<Character> lettresUtilisees = new LinkedHashSet<>();

        // Ajouter les lettres de la clé
        for (char c : cle.toCharArray()) {
            if (!lettresUtilisees.contains(c) && c != 'W') {
                lettresUtilisees.add(c);
            }
        }

        // Ajouter les lettres restantes de l'alphabet
        for (char c = 'A'; c <= 'Z'; c++) {
            if (!lettresUtilisees.contains(c) && c != 'W') {
                lettresUtilisees.add(c);
            }
        }

        // Remplir la grille
        Iterator<Character> iterator = lettresUtilisees.iterator();
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                grille[i][j] = iterator.next();
            }
        }
        return grille;
    }

    // Fonction pour préparer le message
    public static String preparerMessage(String message) {
        StringBuilder messagePrepare = new StringBuilder();

        for (int i = 0; i < message.length(); i++) {
            char c = message.charAt(i);
            if (i < message.length() - 1 && c == message.charAt(i + 1)) {
                messagePrepare.append(c).append('X');
            } else {
                messagePrepare.append(c);
            }
        }

        if (messagePrepare.length() % 2 != 0) {
            messagePrepare.append('X');
        }

        return messagePrepare.toString();
    }

    // Fonction pour trouver la position d'une lettre dans la grille
    public static int[] trouverPosition(char[][] grille, char lettre) {
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                if (grille[i][j] == lettre) {
                    return new int[]{i, j};
                }
            }
        }
        return null; // Ne devrait jamais arriver
    }
}
